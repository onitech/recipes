{"version":3,"sources":["result.module.css","no-result.module.css","Result.js","RecipeResult.js","NoResult.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Result","title","calories","image","source","url","ingredients","className","style","result","src","alt","toFixed","toString","replace","map","text","href","sourceLabel","sourceLink","RecipeResult","recipes","recipe","key","label","NoResult","noResult","App","useState","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","length","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,sBAAsB,YAAc,4BAA4B,YAAc,4BAA4B,WAAa,6B,qBCA/MD,EAAOC,QAAU,CAAC,SAAW,8B,0NC6BdC,MA3BA,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,YACtD,OACC,yBAAKC,UAAWC,IAAMC,QACrB,wBAAIF,UAAWC,IAAMP,OAAQA,GAC7B,yBAAKM,UAAWC,IAAML,MAAOO,IAAKP,EAAOQ,IAAI,KAC7C,0BAAMJ,UAAWC,IAAMN,UACtB,yCACkBA,EAASU,QAAQ,GAiB1BC,WAAWC,QAAQ,wBAAyB,MAftD,wBAAIP,UAAWC,IAAMF,aACpB,2CACCA,EAAYS,KAAI,SAAAT,GAAW,OAC3B,4BAAKA,EAAYU,UAGnB,uBAAGC,KAAMZ,GACR,0BAAME,UAAWC,IAAMU,aAAvB,wBACA,0BAAMX,UAAWC,IAAMW,YAAaf,MCIzBgB,G,MAnBM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,yBAAKd,UAAU,WAAf,QAEKc,EAAQN,KAAI,SAAAO,GAAM,OACf,kBAAC,EAAD,CACIC,IAAKD,EAAOA,OAAOjB,IACnBJ,MAAOqB,EAAOA,OAAOE,MACrBtB,SAAUoB,EAAOA,OAAOpB,SACxBC,MAAOmB,EAAOA,OAAOnB,MACrBC,OAAQkB,EAAOA,OAAOlB,OACtBC,IAAKiB,EAAOA,OAAOjB,IACnBC,YAAagB,EAAOA,OAAOhB,oB,gBCdhC,SAASmB,IACpB,OACI,yBAAKlB,UAAWC,IAAMkB,UAAtB,c,UCoDOC,EApDH,WAER,IAFc,EAKgBC,oBAAS,GALzB,mBAKPP,EALO,KAKEQ,EALF,OAMcD,mBAAS,IANvB,mBAMPE,EANO,KAMCC,EAND,OAOYH,mBAAS,IAPrB,mBAOPI,EAPO,KAOAC,EAPA,KASdC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,mCAAD,OACWJ,EADX,mBATrB,WASqB,oBARpB,mCAQoB,kBADb,cACTK,EADS,gBAKIA,EAASC,OALb,QAKTC,EALS,QAONC,MAAQD,EAAKC,KAAKC,OACvBZ,EAAWU,EAAKC,MAEhBX,GAAW,GAVA,2CAAH,qDAahBa,KACD,CAACV,IAYJ,OACI,yBAAKzB,UAAU,OACX,0BAAMoC,SARI,SAAAC,GACdA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAKqBxB,UAAU,eACjC,2BAAOA,UAAU,aAAauC,KAAK,OAAOC,MAAOjB,EAAQkB,SAbhD,SAAAJ,GACjBb,EAAUa,EAAEK,OAAOF,UAaX,4BAAQxC,UAAU,gBAAgBuC,KAAK,UAAvC,WAMFzB,EAAU,kBAAC,EAAD,CAAcA,QAASA,IAAY,kBAACI,EAAD,QCvCvCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4dceba1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"result_result__3vqtd\",\"title\":\"result_title__15-xI\",\"image\":\"result_image__1F1uw\",\"ingredients\":\"result_ingredients__RiLiV\",\"sourceLabel\":\"result_sourceLabel__2lbZm\",\"sourceLink\":\"result_sourceLink__3RJZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResult\":\"no-result_noResult__1joC5\"};","import React from 'react';\r\nimport style from './result.module.css';\r\n\r\nconst Result = ({ title, calories, image, source, url, ingredients }) => {\r\n\treturn (\r\n\t\t<div className={style.result}>\r\n\t\t\t<h1 className={style.title}>{title}</h1>\r\n\t\t\t<img className={style.image} src={image} alt=\"\" />\r\n\t\t\t<span className={style.calories}>\r\n\t\t\t\t<b>Calories: </b>\r\n\t\t\t\t{numberWithCommas(calories.toFixed(2))}\r\n\t\t\t</span>\r\n\t\t\t<ul className={style.ingredients}>\r\n\t\t\t\t<b>Ingredients:</b>\r\n\t\t\t\t{ingredients.map(ingredients => (\r\n\t\t\t\t\t<li>{ingredients.text}</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t\t<a href={url}>\r\n\t\t\t\t<span className={style.sourceLabel}>See full recipe on: </span>\r\n\t\t\t\t<span className={style.sourceLink}>{source}</span>\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport default Result;","import React from 'react'\r\nimport Result from './Result';\r\nimport './recipe.css'\r\n\r\n\r\nconst RecipeResult = ({ recipes }) => {\r\n    return (\r\n        <div className=\"recipes\">\r\n            HELLO\r\n            {recipes.map(recipe => (\r\n                <Result\r\n                    key={recipe.recipe.url}\r\n                    title={recipe.recipe.label}\r\n                    calories={recipe.recipe.calories}\r\n                    image={recipe.recipe.image}\r\n                    source={recipe.recipe.source}\r\n                    url={recipe.recipe.url}\r\n                    ingredients={recipe.recipe.ingredients}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecipeResult\r\n","import React from 'react'\r\nimport style from './no-result.module.css';\r\n\r\nexport default function NoResult() {\r\n    return (\r\n        <div className={style.noResult}>\r\n            NO RESULT!\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport RecipeResult from './RecipeResult'\nimport NoResult from './NoResult';\nimport './App.css';\n\nconst App = () => {\n\n    const APP_ID = '244ea43b';\n    const APP_KEY = '07e940acdb8f63eef87c8f248c71fb40';\n\n    const [recipes, setRecipes] = useState(false);\n    const [search, setSearch] = useState('');\n    const [query, setQuery] = useState('');\n\n    useEffect(() => {\n        const getRecipes = async () => {\n            const response = await fetch(\n                `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=20`\n            );\n    \n            const data = await response.json();\n            \n            if (data.hits && data.hits.length) {\n                setRecipes(data.hits);\n            } else {\n                setRecipes(false);\n            }\n        };\n        getRecipes();\n    }, [query]);\n\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    }\n\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        setSearch('');\n    }\n\n    return (\n        <div className=\"App\">\n            <form onSubmit={getSearch} className=\"search-form\">\n                <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n                <button className=\"search-button\" type=\"submit\">Search</button>\n                {/* <span className=\"search-tag\">\n                    <input type=\"button\" value=\"easy\" />\n                </span> */}\n            </form>\n\n            { recipes ? <RecipeResult recipes={recipes}/>: <NoResult /> }\n            \n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}